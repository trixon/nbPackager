/* 
 * Copyright 2022 Patrik KarlstrÃ¶m.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.trixon.nbpackager;

import java.awt.Dimension;
import javax.swing.JOptionPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;
import org.openide.windows.IOProvider;
import org.openide.windows.InputOutput;
import org.openide.windows.TopComponent;
import se.trixon.nbpackager_core.DialogListener;
import se.trixon.nbpackager_core.MainPanel;
import se.trixon.nbpackager_core.Options;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//se.trixon.nbpackager//Packager//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "PackagerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "se.trixon.nbpackager.PackagerTopComponent")
@ActionReference(path = "Menu/Tools", position = 401)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PackagerAction",
        preferredID = "PackagerTopComponent"
)
@Messages({
    "CTL_PackagerAction=Packager"
})
public final class PackagerTopComponent extends TopComponent {

    private InputOutput mInputOutput = null;

    public PackagerTopComponent() {
        initComponents();
        setName(Bundle.CTL_PackagerAction());
        init();
    }

    private void init() {
        mainPanel.getLog().setOut(s -> {
            if (mInputOutput == null) {
                mInputOutput = IOProvider.getDefault().getIO("Packager", true);
            }
            mInputOutput.select();
            mInputOutput.getOut().println(s);
        });
        mainPanel.getLog().setErr(s -> {
            if (mInputOutput == null) {
                mInputOutput = IOProvider.getDefault().getIO("Packager", true);
            }
            mInputOutput.select();
            mInputOutput.getErr().println(s);
        });

        if (Options.getInstance().getPreferences() == null) {
            Options.getInstance().setPreferences(NbPreferences.forModule(PackagerOptionsPanel.class));
        }

        mainPanel.init();
        mainPanel.getHelpButton().setVisible(true);
        MainPanel.setDialogListener(new DialogListener() {
            @Override
            public boolean onDialogRequest(String title, String message) {
                return JOptionPane.showConfirmDialog(PackagerTopComponent.this, message, title, JOptionPane.YES_NO_OPTION) == JOptionPane.OK_OPTION;
            }
        });

        setMinimumSize(new Dimension(1, 1));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new se.trixon.nbpackager_core.MainPanel();

        setLayout(new java.awt.BorderLayout());
        add(mainPanel, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private se.trixon.nbpackager_core.MainPanel mainPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
